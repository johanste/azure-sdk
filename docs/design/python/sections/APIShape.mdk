## Clients

### Naming

<<<<<<< HEAD
In general, your API surface will consist of one or more _service clients_ that the consumer will instantiate to connect to your service, plus a set of supporting types.     
=======
Your API surface will consist of one or more _service clients_ that the consumer will instantiate to connect to your service, plus a set of supporting types.
>>>>>>> upstream/master

~ Must {#python-apisurface-serviceclientnaming}
name service client types with a **Client** suffix.

```python
# Yes
class CosmosClient(object) ... 

# No
class CosmosProxy(object) ... 

# No
class CosmosUrl(object) ... 

```
~

~ Must
expose the service clients the user is more likely to interact with from the root namespace of your package.
~

### Constructors/factory methods

~ Must
<<<<<<< HEAD
provide a constructor that takes binding parameters (e.g. the name of, or a url pointing to the service instance), a `credentials` parameter, a `transport` parameter and `**kwargs` for passing through settings to individual HTTP pipeline policies.
=======
provide a constructor that takes binding parameters (for example, the name of, or a URL pointing to the service instance), a `credentials` parameter, a `transport` parameter, and `**kwargs` for passing settings through to individual HTTP pipeline policies.
>>>>>>> upstream/master

Only the minimal information needed to connect and interact with the service should be required. All additional information should be optional.

The constructor **must not** take a connection string. Instead, use a [separate factory method](#python-apishape-connectionstring-factory).
~

~ Must {#python-apishape-connectionstring-factory}
<<<<<<< HEAD
use a separate factory method `ExampleServiceClient.from_connection_string` to create a client from a connection string (if the client supports connection strings). The method **should** parse the connection string and pass the values to the constructor.

*Note: You should only provide a `from_connection_string` factory method if the Azure Portal exposes a connection string for your service.*
=======
use a separate factory method `ExampleServiceClient.from_connection_string` to create a client from a connection string (if the client supports connection strings).

The method **should** parse the connection string and pass the values to the constructor.  Provide a `from_connection_string` factory method only if the Azure portal exposes a connection string for your service.
>>>>>>> upstream/master
~


### Configuration

~ Must
honor the following global configuration settings:

|Setting|Meaning|
|-|-|
|HTTP_PROXY|Proxy for HTTP connections.|
|HTTPS_PROXY|Proxy for HTTPS connections.|
<<<<<<< HEAD
|NO_PROXY|Hosts which must not use a proxy.|
=======
|NO_PROXY|Hosts that must not use a proxy.|
>>>>>>> upstream/master
|AZURE_TELEMETRY_DISABLED|Disables telemetry/user agent strings.|
|AZURE_TRACING_DISABLED|Disable tracing.|
~
### Hierarchical services

<<<<<<< HEAD
Many services have resources with nested child (or sub) resources. This includes Azure Storage's account, container and blob resources, where an account contains zero or more containers, which in turn contains zero or more blobs.

~ Must
create a client type corresponding to each level in the hierarchy except for leaf resource types. You **May** omit creating a client type for leaf node resources.
~

~ Must
make it possible to directly create clients for each level. The constructor **should** take a set of ancestor names and child name or a Url identifying the full "path" to the client.
=======
Many services have resources with nested child (or sub) resources. For example, Azure Storage provides an account that contains zero or more containers, which in turn contains zero or more blobs.

~ Must
create a client type corresponding to each level in the hierarchy except for leaf resource types. You **may** omit creating a client type for leaf node resources.
~

~ Must
make it possible to directly create clients for each level in the hierarchy.  The constructor can be called directly or via the parent.
>>>>>>> upstream/master

```python
class ChildClient:
    # Yes:
    __init__(self, parent, name, credentials, **kwargs) ...

class ChildClient:
    # Yes:
    __init__(self, url, credentials, **kwargs) ...
<<<<<<< HEAD

=======
>>>>>>> upstream/master
```
~

~ Must
provide a `get_<child>_client(self, name, **kwargs)` method to retrieve a client for the named child. The method must not make a network call to verify the existence of the child.
~

~ Must
provide method `create_<child>(...)` that creates a child resource. The method **should** return a client for the newly created child resource.
~

~ Should
provide method `delete_<child>(...)` that deletes a child resource.
~


### Service operations

<<<<<<< HEAD
Since the client library generally wraps one or more HTTP requests, it is important to support standard network capabilities. Asynchronous programming techniques are not widely understood, although such techniques are essential in developing scalable web services and required in certain environments (such as mobile or Node environments). Many developers prefer synchronous method calls for their easy semantics when learning how to use a technology. In addition, consumers have come to expect certain capabilities in a network stack - capabilities such as call cancellation, automatic retry, and logging. 
=======
Since the client library generally wraps one or more HTTP requests, it's important to support standard network capabilities. Although not widely understood, asynchronous programming techniques are essential in developing resilient web services. Many developers prefer synchronous method calls for their easy semantics when learning how to use a technology. The HTTP pipeline is a component in the `azure-core` library that assists in providing connectivity to HTTP-based Azure services.
>>>>>>> upstream/master

~ Must
use the [HTTP pipeline](#python-core-http-pipeline) to send requests to service REST endpoints.
~

~ Should
include the following policies in the HTTP pipeline:

- Telemetry (`azure.core.pipeline.policies.UserAgentPolicy`)
- Unique Request ID
<<<<<<< HEAD
- Retry (`azure.core.pipeline.policies.RetryPolicy`/`azure.core.pipeline.policies.AsyncRetryPolicy`)
=======
- Retry (`azure.core.pipeline.policies.RetryPolicy` and `azure.core.pipeline.policies.AsyncRetryPolicy`)
>>>>>>> upstream/master
- Credentials
- Response downloader
- Distributed tracing
- Logging (`azure.core.pipeline.policies.NetworkTraceLoggingPolicy`)
~

~ Should
prefer the usage one of the preferred verbs for method names.

|Verb|Parameters|Returns|Comments|
|-|-|-|-|
<<<<<<< HEAD
| create_\<noun>|key, item, [allow_overwrite=True]|Created item|Create new item. Fails if item already exist.|
| upsert_\<noun>|key, item|Updated or created item|Create new item or update existing item. Verb is primarily used in database-like services |
| set_\<noun>|key, item|Updated or created item|Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service |
| update_\<noun>|key, partial item|Updated item|Fails if item does not exist. |
| replace_\<noun>|key, item|Replace existing item|Completely replaces an existing item. Fails if the item does not exist. |
| append_\<noun>|item|Appended item|Add item to a collection. Item will be added last. |
| add_\<noun>|index, item|Added item|Add item to a collection. Item will be added at the given index. |
| get_\<noun>|key|Item|Will return None if item does not exist |
| list_\<noun>||`azure.core.Pageable[Item]`|Return an iterable of items. Returns iterable with no items if no items exist (does not return None or throw)|
| \<noun>\_exists|key|`bool`|Return True if the item exists. Must raise an exception if the method failed to determine if the item exists (e.g. the service returned a Http 503 response)|
| delete_\<noun>|key|None|Delete an existing item. Must succeed even if item did not exist.|
| remove_\<noun>|key|None or removed item|Remove a reference to an item from a collection. This method does not delete the actual item, only the reference.|
=======
|`create_\<noun>`|key, item, `[allow_overwrite=True]`|Created item|Create new item. Fails if item already exists.|
|`upsert_\<noun>`|key, item|item|Create new item, or update existing item. Verb is primarily used in database-like services |
|`set_\<noun>`|key, item|item|Create new item, or update existing item. Verb is primarily used for dictionary-like properties of a service |
|`update_\<noun>`|key, partial item|item|Fails if item doesn't exist. |
|`replace_\<noun>`|key, item|item|Completely replaces an existing item. Fails if the item doesn't exist. |
|`append_\<noun>`|item|item|Add item to a collection. Item will be added last. |
|`add_\<noun>`|index, item|item|Add item to a collection. Item will be added at the given index. |
|`get_\<noun>`|key|item|Raises an exception if item doesn't exist |
|`list_\<noun>`||`azure.core.Pageable[Item]`|Return an iterable of items. Returns iterable with no items if no items exist (doesn't return `None` or throw)|
|`\<noun>\_exists`|key|`bool`|Return `True` if the item exists. Must raise an exception if the method failed to determine if the item exists (for example, the service returned an HTTP 503 response)|
|`delete_\<noun>`|key|`None`|Delete an existing item. Must succeed even if item didn't exist.|
|`remove_\<noun>`|key|removed item or `None`|Remove a reference to an item from a collection. This method doesn't delete the actual item, only the reference.|
>>>>>>> upstream/master
~

~ Must
standardize verb prefixes outside the list of preferred verbs for a given service across language SDKs. If a verb is called `dowload` in one language, we should avoid naming it `fetch` in another.
~

~ Must {#python-long-op-naming}
prefix methods with `begin_` for long running operations. Long running operations *must* return a [Poller](#python-core-protocol-lro-poller) object. 
~

~ Must
support the common arguments for service operations:

|Name|Description|Applies to|Notes|
|-|-|-|-|
|`timeout`|Timeout in seconds|All service methods|
|`headers`|Custom headers to include in the service request|All requests|Headers are added to all requests made (directly or indirectly) by the method.|
<<<<<<< HEAD
|`continuation_token`|Opaque token indicating the first page to retrieve. Generally retreived from a previous `Paged` return value.|`list` operations.|
|`client_request_id`|Caller specified identification of the request.|Service operations for services that allow the client to send a client generated correlation id.|Examples of this include `x-ms-client-request-id` headers.|The client library **must** use this value if provided, or generate a unique value for each request when not specified.|
=======
|`continuation_token`|Opaque token indicating the first page to retrieve. Retrieved from a previous `Paged` return value.|`list` operations.|
|`client_request_id`|Caller specified identification of the request.|Service operations for services that allow the client to send a client-generated correlation ID.|Examples of this include `x-ms-client-request-id` headers.|The client library **must** use this value if provided, or generate a unique value for each request when not specified.|
>>>>>>> upstream/master
|`response_hook`|`callable` that is called with (response, headers) for each operation.|All service methods|
~

~ Must {#python-operations-accept-mappings}
accept a Mapping (`dict`-like) object in the same shape as a serialized model object for parameters.

```python
    # Yes:
    class Model(object):

        def __init__(self, name, size):
            self.name = name
            self.size = size

    def do_something(model: "Model"):
        ...

    do_something(Model(name='a', size=17)) # Works
    do_something({'name': 'a', 'size', '17'}) # Does the same thing...
    ```
~

~ Must
use "flattened" named arguments for `update_` methods. **May** additionally take the whole model instance as a named parameter. If the caller passes both a model instance and individual key=value parameters, the explicit key=value parameters override whatever was specified in the model instance.

```python
class Model(object):

    def __init__(self, name, size, description):
        self.name = name
        self.size = size
        self.description = description

class Client(object):

    def update_model(self, name=None, size=None, model=None): ...

model = Model(name='hello', size=4711, description='This is a description...')

client.update_model(model=model, size=4712) # Will send a request to the service to update the model's size to 4712
model.description = 'Updated'
model.size = -1
# Will send a request to the service to update the model's size to 4713 and description to 'Updated'
client.update_model(name='hello', size=4713, model=model)  
```
~

#### Parameter validation

<<<<<<< HEAD
The service client will have several methods that perform requests on the service. **Service parameters** are directly passed across the wire to an Azure service. **Client parameters** are not passed directly to the service, but used within the client library to fulfill the request. Examples of client parameters include values that are used to construct a URI, or a file that needs to be uploaded to storage.


~ Must 
validate Client parameters. This is especially important for parameters used to build up the URL since a malformed URL means that the client library will end up calling an incorrect endpoint. 
=======
The service client will have several methods that send requests to the service. **Service parameters** are directly passed across the wire to an Azure service. **Client parameters** aren't passed directly to the service, but used within the client library to fulfill the request. Parameters that are used to construct a URI, or a file to be uploaded are examples of client parameters.

~ Must
validate client parameters. Validation is especially important for parameters used to build up the URL since a malformed URL means that the client library will end up calling an incorrect endpoint.
>>>>>>> upstream/master

```python
# No:
def get_thing(name: "str") -> "str":
    url = f'https://<host>/things/{name}'
    return requests.get(url).json()

try:
    thing = get_thing('') # Ooops - we will end up calling '/things/' which usually lists 'things'. We wanted a specific 'thing'.
except ValueError:
    print('We called with some invalid parameters. We should fix that.')

# Yes:
def get_thing(name: "str") -> "str":
    if not name:
        raise ValueError('name must be a non-empty string')
    url = f'https://<host>/things/{name}'
    return requests.get(url).json()

try:
    thing = get_thing('')
except ValueError:
    print('We called with some invalid parameters. We should fix that.')
```
~

~ MustNot
<<<<<<< HEAD
validate Service parameters. This includes null checks, empty strings, and other common validating conditions. Let the service validate any request parameters.
~

~ Must
validate the developer experience when the service parameters are invalid to ensure appropriate error messages are generated by the service. If the developer experience is compromised due to service-side error messages, work with the service team to correct prior to release.
=======
validate service parameters. Don't do null checks, empty string checks, or other common validating conditions on service parameters. Let the service validate all request parameters.
~

~ Must
validate the developer experience when the service parameters are invalid to ensure appropriate error messages are generated by the service. Work with the service team if the developer experience is compromised because of service-side error messages.
>>>>>>> upstream/master
~

#### Response formats

Requests to the service fall into two basic groups - methods that make a single logical request, or a deterministic sequence of requests. An example of a single logical request is a request that may be retried inside the operation. An example of a deterministic sequence of requests is a paged operation.

<<<<<<< HEAD
The logical entity is a protocol neutral representation of a response. For HTTP, the logical entity may combine data from headers, body and the status line. A common example is exposing an ETag header as a property on the logical entity in addition to any deserialized content from the body.
=======
The logical entity is a protocol neutral representation of a response. For HTTP, the logical entity may combine data from headers, body, and the status line. For example, you may wish to expose an `ETag` header as a property on the logical entity.
>>>>>>> upstream/master

~ Must
optimize for returning the logical entity for a given request. The logical entity MUST represent the information needed in the 99%+ case.
~

~ Must {#python-list-operations-return-paged}
<<<<<<< HEAD
return a value that implements the [Paged protocol](#python-core-protocol-paged) for operations that return collections. The [Paged protocol](#python-core-protocol-paged) allows for a user to easily enumerate all items in a returned collection in addition to providing a method that gives access to individual pages.
=======
return a value that implements the [Paged protocol](#python-core-protocol-paged) for operations that return collections. The [Paged protocol](#python-core-protocol-paged) allows the user to iterate through all items in a returned collection, and also provides a method that gives access to individual pages.
>>>>>>> upstream/master
~

~ Must {#python-longrunning-operations-return-poller}
return a value that implements the [Poller protocol](#python-core-protocol-lro-poller) for long running operations. 
~


## Models

~ Must
<<<<<<< HEAD
implement `__repr__` for model types. The representation **must** at a minimum include include the type name and any key properties (i.e. properties that help identify the model instance).
=======
implement `__repr__` for model types. The representation **must** include the type name and any key properties (that is, properties that help identify the model instance).
>>>>>>> upstream/master
~

~ Must
truncate the output of `__repr__` after 1024 characters.
~
